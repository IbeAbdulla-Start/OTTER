#include<fstream>
#include<conio.h>
#include<string.h>
#include<iomanip>
#include<iostream>

using namespace std;

class CBook
{
    char m_bookID[30];
    char m_bookName[20];
    char m_author[20];
public:
    void TaddBook()
    {
        cout << "\nEnter The Book Number: ";
        cin >> m_bookID;
        cout << "\nEnter The Name of The Book: ";
        cin.ignore();
        cin.getline(m_bookName, 20);
        cout << "\nEnter The Author's Name: ";
        cin.ignore();
        cin.getline(m_author, 20);
        cout << "\nBook Created Successfully...";
    }

    void TshowBook()
    {
        cout << " Book Number: " << m_bookID << " Book Name: " << m_bookName << " Author's Name: " << m_author;
    }

    void TmodifyBook()
    {
        cout << "\nBook number : " << m_bookID;
        cout << "\nModify Book Name : ";
        cin.ignore();
        cin.getline(m_bookName, 50);
        cout << "\nModify Author's Name: ";
        cin.ignore();
        cin.getline(m_author, 50);
    }

    char* Tgetbooknumber()
    {
        return m_bookID;
    }
    void Treport()
    {
        cout << m_bookID << setw(30) << m_bookName << setw(30) << m_author << endl;
    }

};

class CStudent
{
    char m_studentID[20];
    char m_studentName[20];
    char stbno[6];
    int token;
public:
    void TaddStudent()
    {
        cout << "\nEnter The ID Number ";
        cin >> m_studentID;
        cout << "\n\nEnter The Name of The Student: ";
        cin >> m_studentName;
        token = 0;
        stbno[0] = '/0';
        cout << "\t\t\n\nStudent Record Created Successfully...";
    }
    void TshowStudent()
    {
        cout << "\nID Number: " << m_studentID;
        cout << "\nStudent Name: ";
        puts(m_studentName);
        cout << "\nNo of Book issued: " << token;
        if (token == 1)
            cout << "\nBook No " << stbno;
    }
    void TmodifyStudent()
    {
        cout << "\nID Number: " << m_studentID;
        cout << "\nModify Student Name: ";
        cin.ignore();
        cin.getline(m_studentName, 50);
    }
    char* Tget_ID_number()
    {
        return m_studentID;
    }
    char* Tretstbno()
    {
        return stbno;
    }
    int Trettoken()
    {
        return token;
    }
    void Taddtoken()
    {
        token = 1;
    }
    void Tresettoken()
    {
        token = 0;
    }
    void Tgetstbno(char t[])
    {
        strcpy(stbno, t);
    }
    void Treport()
    {
        cout << "\t" << m_studentID << "\t" << m_studentName << "\t" << token << endl;
    }
};

fstream fs, fs2;
CBook bk;
CStudent st;
void addBook()
{
    system("cls");
    int more_or_main;
    fs.open("book.dat", ios::out | ios::app);
    do
    {
        bk.create_book();
        fs.write((char*)&bk, sizeof(CBook));
        cout << "\nPress 1 to add more books.";
        cout << "\nPress 2 to return to main menu.\n";
        cout << "Enter: ";
        cin >> more_or_main;
    } while (more_or_main == 1);
    fs.close();
}
void addStudent()
{
    system("cls");
    int more_or_main;
    fs.open("student.dat", ios::out | ios::app);
    do
    {
        st.TaddStudent();
        fs.write((char*)&st, sizeof(CStudent));
        cout << "\nPress 1 to add more students.";
        cout << "\nPress 2 to return to main menu.\n";
        cout << "Enter: ";
        cin >> more_or_main;
    } while (more_or_main == 1);
    fs.close();
}
void display_book_by_ID(char n[])
{
    system("cls");
    cout << "\nBOOK DETAILS\n";
    int check = 0;
    fs.open("book.dat", ios::in);
    while (fs.read((char*)&bk, sizeof(CBook)))
    {
        if (strcmpi(bk.Tgetbooknumber(), n) == 0)
        {
            bk.show_book();
            check = 1;
        }
    }
    fs.close();
    if (check == 0)
        cout << "\n\nBook does not exist";
    getch();
}
void display_a_student_by_ID(char n[])
{
    system("cls");
    cout << "\nSTUDENT DETAILS\n";
    int check = 0;
    fs.open("student.dat", ios::in);
    while (fs.read((char*)&st, sizeof(CStudent)))
    {
        if ((strcmpi(st.Tget_ID_number(), n) == 0))
        {
            st.TshowStudent();
            check = 1;
        }
    }
    fs.close();
    if (check == 0)
        cout << "\n\nStudent does not exist";
    getch();
}
void modify_book()
{
    system("cls");
    char n[20];
    int found = 0;
    cout << "\n\n\tMODIFY BOOK";
    cout << "\n\n\tEnter The book number: ";
    cin >> n;
    fs.open("book.dat", ios::in | ios::out);
    while (fs.read((char*)&bk, sizeof(CBook)) && found == 0)
    {
        if (strcmpi(bk.Tgetbooknumber(), n) == 0)
        {
            bk.show_book();
            cout << "\nEnter The New Details of book" << endl;
            bk.modify_book();
            int pos = -1 * sizeof(bk);
            fs.seekp(pos, ios::cur);
            fs.write((char*)&bk, sizeof(CBook));
            cout << "\n\n\t Record Updated Successfully...";
            found = 1;
        }
    }
    fs.close();
    if (found == 0)
        cout << "\n\n Record Not Found ";
    getch();
}
void modify_student()
{
    system("cls");
    char n[20];
    int found = 0;
    cout << "\n\n\tMODIFY STUDENT RECORD... ";
    cout << "\n\n\tEnter Student's ID number: ";
    cin >> n;
    fs.open("student.dat", ios::in | ios::out);
    while (fs.read((char*)&st, sizeof(CStudent)) && found == 0)
    {
        if (strcmpi(st.Tget_ID_number(), n) == 0)
        {
            st.TshowStudent();
            cout << "\nEnter The New Details of student" << endl;
            st.TmodifyStudent();
            int pos = -1 * sizeof(st);
            fs.seekp(pos, ios::cur);
            fs.write((char*)&st, sizeof(CStudent));
            cout << "\n\n\t Record Updated Successfully...";
            found = 1;
        }
    }
    fs.close();
    if (found == 0)
        cout << "\n\n Record Not Found ";
    getch();
}
void delete_student()
{
    system("cls");
    char n[20];
    int flag = 0;
    cout << "\n\n\n\tDELETE STUDENT";
    cout << "\n\nEnter The ID number of the Student You Want To Delete: ";
    cin >> n;
    fs.open("student.dat", ios::in | ios::out);
    fstream fs2;
    fs2.open("Temp.dat", ios::out);
    fs.seekg(0, ios::beg);
    while (fs.read((char*)&st, sizeof(CStudent)))
    {
        if (strcmpi(st.Tget_ID_number(), n) != 0)
            fs2.write((char*)&st, sizeof(CStudent));
        else
            flag = 1;
    }
    fs2.close();
    fs.close();
    remove("student.dat");
    rename("Temp.dat", "student.dat");
    if (flag == 1)
        cout << "\n\n\tRecord Deleted ..";
    else
        cout << "\n\nRecord not found";
    getch();
}
void delete_book()
{
    system("cls");
    char n[20];
    int flag = 0;
    cout << "\n\n\n\tDELETE BOOK";
    cout << "\n\nEnter The Book's number You Want To Delete: ";
    cin >> n;
    fs.open("book.dat", ios::in | ios::out);
    fstream fs2;
    fs2.open("Temp.dat", ios::out);
    fs.seekg(0, ios::beg);
    while (fs.read((char*)&bk, sizeof(CBook)))
    {
        if (strcmpi(bk.Tgetbooknumber(), n) != 0)
        {
            fs2.write((char*)&bk, sizeof(CBook));
        }
        else
            flag = 1;
    }
    fs2.close();
    fs.close();
    remove("book.dat");
    rename("Temp.dat", "book.dat");
    if (flag == 1)
        cout << "\n\n\tRecord Deleted ..";
    else
        cout << "\n\nRecord not found";
    getch();
}
void display_all_students()
{
    system("cls");
    fs.open("student.dat", ios::in);
    if (!fs)
    {
        cout << "ERROR!!! FILE COULD NOT BE OPEN ";
        getch();
        return;
    }
    cout << "\n\n\t\tSTUDENT LIST\n\n";
    cout << "==================================================================\n";
    cout << "\tID Number." << setw(10) << "Name" << setw(20) << "Book Issued\n";
    cout << "==================================================================\n";
    while (fs.read((char*)&st, sizeof(CStudent)))
    {
        st.Treport();
    }
    fs.close();
    getch();
}
void display_allb()
{
    system("cls");
    fs.open("book.dat", ios::in);
    if (!fs)
    {
        cout << "ERROR!!! FILE COULD NOT BE OPEN ";
        getch();
        return;
    }
    cout << "\n\n\t\tBook LIST\n\n";
    cout << "=========================================================================\n";
    cout << "Book Number" << setw(20) << "Book Name" << setw(25) << "Author\n";
    cout << "=========================================================================\n";
    while (fs.read((char*)&bk, sizeof(CBook)))
    {
        bk.Treport();
    }
    fs.close();
    getch();
}
void issue_book()
{
    system("cls");
    char sn[20], bn[20];
    int found = 0, flag = 0;
    cout << "\t\t\nBOOK ISSUE";
    cout << "\n\n\tEnter student's ID number: ";
    cin >> sn;
    fs.open("student.dat", ios::in | ios::out);
    fs2.open("book.dat", ios::in | ios::out);
    while (fs.read((char*)&st, sizeof(CStudent)) && found == 0)
    {
        if (strcmpi(st.Tget_ID_number(), sn) == 0)
        {
            found = 1;
            if (st.Trettoken() == 0)
            {
                cout << "\n\n\tEnter book number: ";
                cin >> bn;
                while (fs2.read((char*)&bk, sizeof(CBook)) && flag == 0)
                {
                    if (strcmpi(bk.Tgetbooknumber(), bn) == 0)
                    {
                        bk.show_book();
                        flag = 1;
                        st.Taddtoken();
                        st.Tgetstbno(bk.Tgetbooknumber());
                        int pos = -1 * sizeof(st);
                        fs.seekp(pos, ios::cur);
                        fs.write((char*)&st, sizeof(CStudent));
                        cout << "\n\n\t Book issued successfully...";
                    }
                }
                if (flag == 0)
                    cout << "Book number does not exist";
            }
            else
                cout << "You have not returned the last book ";
        }
    }
    if (found == 0)
        cout << "Student record not exist...";
    getch();
    system("cls");
    fs.close();
    fs2.close();
}
void book_return()
{
    system("cls");
    char sn[20], bn[20];
    int found = 0, flag = 0, day, fine;
    cout << "\t\tRETURN BOOKS\n";
    cout << "\n\n\tEnter The student’s ID Number: ";
    cin >> sn;
    fs.open("student.dat", ios::in | ios::out);
    fs2.open("book.dat", ios::in | ios::out);
    while (fs.read((char*)&st, sizeof(CStudent)) && found == 0)
    {
        if (strcmpi(st.Tget_ID_number(), sn) == 0)
        {
            found = 1;
            if (st.Trettoken() == 1)
            {
                while (fs2.read((char*)&bk, sizeof(CBook)) && flag == 0)
                {
                    if (strcmpi(bk.Tgetbooknumber(), st.Tretstbno()) == 0)
                    {
                        bk.show_book();
                        flag = 1;
                        cout << "\n\nBook returned in no. of days";
                        cin >> day;
                        if (day > 15)
                        {
                            fine = (day - 15) * 1;
                            cout << "\n\nThe Book is last. You have to pay a fine of  " << fine;
                        }
                        st.Tresettoken();
                        int pos = -1 * sizeof(st);
                        fs.seekp(pos, ios::cur);
                        fs.write((char*)&st, sizeof(CStudent));
                        cout << "\n\n\t Book returned successfully...";
                    }
                }
                if (flag == 0)
                    cout << "Book number does not exist";
            }
            else
                cout << "No book is issued..please check!!";
        }
    }
    if (found == 0)
        cout << "Student record not exist...";
    getch();
    system("cls");
    fs.close();
    fs2.close();
}
void book_menu()
{
    int results;
    cout << "\n\t\tPress 1 to CREATE BOOKS";
    cout << "\n\t\tPress 2 to DISPLAY ALL BOOKS";
    cout << "\n\t\tPress 3 to DISPLAY SPECIFIC BOOK";
    cout << "\n\t\tPress 4 to MODIFY BOOKS";
    cout << "\n\t\tPress 5 to DELETE BOOKS";
    cout << "\n\t\tPress 6 to GO BACK TO MAIN MENU";
    cout << "\n\t\tOption: ";
    cin >> results;
    switch (results)
    {
    case 1:  system("cls");
        addBook();
        break;
    case 2: display_allb();
        break;
    case 3:
        char num[20];
        system("cls");
        cout << "\n\n\tPlease Enter The book No. ";
        cin >> num;
        display_book_by_ID(num);
        break;
    case 4: modify_book(); break;
    case 5: delete_book(); break;
    case 6: system("cls");
        break;
    default:cout << "\a";
    }
}
void student_menu()
{
    int result;
    cout << "\n\t\tPress 1 to CREATE STUDENT RECORD";
    cout << "\n\t\tPress 2 to DISPLAY ALL STUDENTS RECORD";
    cout << "\n\t\tPress 3 to DISPLAY SPECIFIC STUDENT RECORD";
    cout << "\n\t\tPress 4 to MODIFY STUDENT RECORD";
    cout << "\n\t\tPress 5 to DELETE STUDENT RECORD";
    cout << "\n\t\tPress 6 to GO BACK TO MAIN MENU";
    cout << "\n\t\tOption: ";
    cin >> result;
    switch (result)
    {
    case 1:  system("cls");
        addStudent();
        break;
    case 2: system("cls");

        display_all_students();
        break;
    case 3:
        char num[20];
        system("cls");
        cout << "\n\n\tPlease Enter The ID Number: ";
        cin >> num;
        display_a_student_by_ID(num);
        break;
    case 4:system("cls");
        modify_student(); break;
    case 5: system("cls");
        delete_student(); break;
    case 6:
        break;
    default:cout << "\a";
    }
}
int main()
{
    int result = 0;
    for (;;)
    {
        cout << "\n\t\tPress 1 to ISSUE BOOKS";
        cout << "\n\t\tPress 2 to RETURN BOOKS";
        cout << "\n\t\tPress 3 to UPDATE STUDENT RECORDS";
        cout << "\n\t\tPress 4 to UPDATE BOOK RECORDS";
        cout << "\n\t\tPress 5 to TO EXIT";
        cout << "\n\t\tOption: ";
        cin >> result;
        switch (result)
        {
        case 1:system("cls");
            issue_book();
            break;
        case 2:system("cls");
            book_return();
            break;
        case 3:system("cls");
            student_menu();
            break;
        case 4:system("cls");
            book_menu();
            break;
        case 5:exit(0);
            break;
        default:cout << "\a";
            exit(0);
        }
    }
}
